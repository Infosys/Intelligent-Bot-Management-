// The following code was generated by Microsoft Visual Studio 2005.
// The test owner should check each test for validity.
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System;
using System.Text;
using System.Collections.Generic;
using System.Resources;
using Infosys.Lif.DataLoader;

namespace DataLoaderTest
{
    /// <summary>
    ///This is a test class for Infosys.Lif.DataLoader.DataLoadManager and is intended
    ///to contain all Infosys.Lif.DataLoader.DataLoadManager Unit Tests
    ///</summary>
    [TestClass()]
    public class DataLoadManagerTest
    {


        private TestContext testContextInstance;

        /// <summary>
        ///Gets or sets the test context which provides
        ///information about and functionality for the current test run.
        ///</summary>
        public TestContext TestContext
        {
            get
            {
                return testContextInstance;
            }
            set
            {
                testContextInstance = value;
            }
        }
        #region Additional test attributes
        // 
        //You can use the following additional attributes as you write your tests:
        //
        //Use ClassInitialize to run code before running the first test in the class
        //
        //[ClassInitialize()]
        //public static void MyClassInitialize(TestContext testContext)
        //{
        //}
        //
        //Use ClassCleanup to run code after all tests in a class have run
        //
        //[ClassCleanup()]
        //public static void MyClassCleanup()
        //{
        //}
        //
        //Use TestInitialize to run code before running each test
        //
        //[TestInitialize()]
        //public void MyTestInitialize()
        //{
        //}
        //
        //Use TestCleanup to run code after each test has run
        //
        //[TestCleanup()]
        //public void MyTestCleanup()
        //{
        //}
        //
        #endregion


        /// <summary>
        ///A test for FetchData&lt;&gt; (T)
        ///</summary>
        [TestMethod()]
        public void FetchDataTest()
        {
            //positive test case
            DataLoadManager target = new DataLoadManager();
            CrMoPostCode pCodAct = new CrMoPostCode();
            CrMoPostCode PCodExp = new CrMoPostCode();
            
            PCodExp.deliveryOfficeCode = "222";
            PCodExp.mailingCategory = "Mail_Cat";
            PCodExp.postCode = "999";
            
            pCodAct = target.FetchData(pCodAct);
            
            Assert.AreEqual(PCodExp.postCode, pCodAct.postCode, "Infosys.Lif.DataLoader.DataLoadManager.FetchData<T> did not return the expected value.");

        }

        /// <summary>
        ///A test for FetchData&lt;&gt; (T, string)
        ///</summary>
        [TestMethod()]
        public void FetchDataTest1()
        {
            //positive test case
            DataLoadManager target = new DataLoadManager();
            CrMoPostCode pCodAct = new CrMoPostCode();
            CrMoPostCode PCodExp = new CrMoPostCode();
                        
            PCodExp.postCode = "123";                  
            
            string filter = "id=123"; 
                                  
            pCodAct = target.FetchData(pCodAct, filter);
             
            Assert.AreEqual(pCodAct.postCode, PCodExp.postCode, "Infosys.Lif.DataLoader.DataLoadManager.FetchData<T> did not return the expected value");             
        }

        /// <summary>
        ///A test for FetchData&lt;&gt; (T)
        ///</summary>
        [TestMethod()]
        public void FetchDataTest2()
        {
            //case when default source is null
            DataLoadManager target = new DataLoadManager();
            CrMoPostCode1 pCodAct = new CrMoPostCode1();
                        
            string Actual = String.Empty;
            string Expected = Infosys.Lif.DataLoader.Properties.Resource1.ExcepCustomLoaderObjNull;//"Passed Object is null";

            try
            {
                pCodAct = target.FetchData(pCodAct);
            }

            catch (Exception ex)
            {
                Actual = ex.Message;
            }

            Assert.AreEqual(Actual, Expected, "Test Passed");            
        }

        /// <summary>
        ///A test for FetchData&lt;&gt; (T, string)
        ///</summary>
        [TestMethod()]
        public void FetchDataTest3()
        {
            //supplied filter condition does not exist
            DataLoadManager target = new DataLoadManager();
            CrMoPostCode pCodAct = new CrMoPostCode();

            string Actual = String.Empty;
            string Expected = Infosys.Lif.DataLoader.Properties.Resource1.ExcepCustomLoaderObjNull;
                        
            string filter = "id=1231"; 

            try
            {
                pCodAct = target.FetchData(pCodAct, filter);
            }

            catch (Exception ex)
            {
                Actual = ex.Message;
            }

            Assert.AreEqual(Actual, Expected, "Test Passed");
        }

        /// <summary>
        ///A test for FetchData&lt;&gt; (T, string)
        ///</summary>
        [TestMethod()]
        public void FetchDataTest4()
        {
            //negative test case : wrong entity passed
            DataLoadManager target = new DataLoadManager();            
            LoaderException objPassed = new LoaderException();

            string Actual = String.Empty;
            string Expected = Infosys.Lif.DataLoader.Properties.Resource1.ExcepCustomLoaderObjNull;

            try
            {
                objPassed = target.FetchData(objPassed);
            }

            catch (Exception ex)
            {
                Actual = ex.Message;
            }

            Assert.AreEqual(Actual, Expected, "Test Passed");
        }

        /// <summary>
        ///A test for FetchData&lt;&gt; (T, string)
        ///</summary>
        [TestMethod()]
        public void FetchDataTest5()
        {
            //negative test case : wrong entity passed
            DataLoadManager target = new DataLoadManager();   
            LoaderException objPassed = new LoaderException();

            string Actual = String.Empty;
            string Expected = Infosys.Lif.DataLoader.Properties.Resource1.ExcepCustomLoaderObjNull;
            string filter = "id=123";

            try
            {
                objPassed = target.FetchData(objPassed, filter);
            }

            catch (Exception ex)
            {
                Actual = ex.Message;
            }

            Assert.AreEqual(Actual, Expected, "Test Passed");            
        }

        /// <summary>
        ///A test for FetchData&lt;&gt; (T, string)
        ///</summary>
        [TestMethod()]
        public void FetchDataTest6()
        {
            //negative test case : File to access CrMoPostCodeXml2.xml is erroneous or empty
            DataLoadManager target = new DataLoadManager();
            CrMoPostCode pCodAct = new CrMoPostCode();
            string filter = "id=321";

            string Actual = String.Empty;
            string Expected = Infosys.Lif.DataLoader.Properties.Resource1.ExcepCustomLoaderDeserialize;//"Passed Object is null";

            try
            {
                pCodAct = target.FetchData(pCodAct, filter);
            }

            catch (Exception ex)
            {
                Actual = ex.Message;
            }

            Assert.AreEqual(Actual, Expected, "Test Passed");
        }
    }


}
