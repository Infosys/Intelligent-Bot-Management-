$MethodTemplate
	/// <summary>
	/// This class implements the service interface class "I##ServiceName##"
	/// </summary>
	[ServiceBehavior(InstanceContextMode=InstanceContextMode.PerSession)]
	public class ##ServiceName##:I##ServiceName##
	{
		#region I##ServiceName## Members
		public RequestParameters requestParameters = new RequestParameters();
		
		/// <summary>
		/// This class holds the response coming from the host system.
		/// </summary>
		public class ##ContractEntityName##ResponseEventArgs : EventArgs
		{
			ContractEntity.##ContractEntityName## receivedResponse;
		     
			public ContractEntity.##ContractEntityName## ReceivedResponse
			{
				get { return receivedResponse; }
				set { receivedResponse = value; }
			}
		}

		public delegate void ##ContractEntityName##Response(object sender, ##ContractEntityName##ResponseEventArgs e);
		 
		public event ##ContractEntityName##Response ##ContractEntityName##ResponseReceived;
		 
		private ContractEntity.##ContractEntityName## receivedResponse##ContractEntityName##;
		 
		/// <summary>
		/// Call the service ##ServiceName## synchronously
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="responses"></param>
		private void legacyEvent##ContractEntityName##_ResponseReceivedSync(object sender, Infosys.Lif.LegacyFacade.RequestDelegateArgs responses)
		{
			receivedResponse##ContractEntityName## = (ContractEntity.##ContractEntityName##)responses.Response["##ServiceName##"];
		}
		 
		/// <summary>
		/// This is the definition of the service interface method of "I##ServiceName##" interface.
		/// the method calls the transaction on host using the request and returns response.
		/// </summary>
		/// <param name="memberContractAddedHeaderObject"></param>
		/// <returns>response message</returns>
		public ResponseMessageType ##MethodName##(RequestMessageType memberContractAddedHeaderObject)
		{
			LegacyEvent legacyEvent##ContractEntityName## = new LegacyEvent();
			legacyEvent##ContractEntityName##.ResponseReceived += 
				new RequestDelegate(legacyEvent##ContractEntityName##_ResponseReceivedSync);
		      
			//initialize request parameters with proper format
			string transactionID = CheckFormat("##TransacID##", 4);
			string userId = CheckFormat(memberContractAddedHeaderObject.LoginDetails.userID, 10);
			string password = CheckFormat(memberContractAddedHeaderObject.LoginDetails.password, 8);
			string operationType = "##OperType##";
		      
			//add request parameters to the request collection
			requestParameters.RequestCollection.Add("ServiceName", "##ServiceName##");
			requestParameters.RequestCollection.Add("TransactionID", transactionID);
			requestParameters.RequestCollection.Add("UserID", userId);
			requestParameters.RequestCollection.Add("Password", password);
			requestParameters.RequestCollection.Add("OperationType", operationType);
		      
			try
			{
				//call method to execute the specified transaction on the host
				ServiceManager.Execute(legacyEvent##ContractEntityName##, ServiceManager.ProcessMode.WaitForAll,
					"##ServiceName##", memberContractAddedHeaderObject.ContractData, requestParameters);
			}
			catch (Exception exc)
			{
				//Handle the exception
				throw exc;
			}
			ResponseMessageType response = new ResponseMessageType();
		      
			//return the response data
			response.ContractData = receivedResponse##ContractEntityName##;
			return response;
		}
         
		/// <summary>
		/// check if the length of input string is as per specified length and correct it if not.
		/// </summary>
		/// <param name="strInput">input string</param>
		/// <param name="strLength">required length</param>
		/// <returns>correct formatted string</returns> 
		private string CheckFormat(string strInput, int strLength)
		{
			//if string length is more than the specified, truncate the string for required length
			if (strInput.Length > strLength)
			{
				strInput = strInput.Substring(0, strLength);
			}
			
			//if string length is less than the specified, append spaces to make it required length
			if (strInput.Length < strLength)
			{
				strInput = strInput.PadRight(strLength, ' ');
			}
			return strInput;
		}

		/// <summary>
		/// call the "##ServiceName##" service asynchronously
		/// </summary>
		/// <param name="sender"></param>
		/// <param name="responses"></param>
		private void legacyEvent##ContractEntityName##_ResponseReceivedASync(object sender, Infosys.Lif.LegacyFacade.RequestDelegateArgs responses)
		{
			  receivedResponse##ContractEntityName## = (ContractEntity.##ContractEntityName##)responses.Response["##ServiceName##"];
		}
		#endregion         
     }
$NameSpacesImport
//import contract data entity namespace
using ContractEntity = ##ContractEntityNamespace##;
$end
/******************************************************************************
This class was code generated by Legacy Workbench.

This class represents the implementation of the service interface class.

Copyright (c) 2003 - 2008 Infosys Technologies Ltd. All Rights Reserved.
******************************************************************************/
using System;
using System.Text;
using System.Collections.Generic;
using System.ServiceModel;
using System.Runtime.Serialization;

//import service contract namespace
using ##ServiceContractNamespace##;

//import LIF framework namespaces
using Infosys.Lif.LegacyFacade;
using Infosys.Lif.LegacyParameters;
##ImportsFilled##

namespace ##ServiceImplementationNamespace##
{
     ##MethodBodies##
}