// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.1.0
// Schema file: LegacyWorkbenchConfigurations.xsd
// Creation Date: 5/15/2008 4:08:28 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations
{
    public struct Declarations
    {
        public const string SchemaVersion = "";
    }
    
    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class LanguageTypeCollection : ArrayList
    {
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType obj)
        {
            base.Add(obj);
            return obj;
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType Add()
        {
            return Add(new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType());
        }

        public void Insert(int index, Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType obj)
        {
            base.Remove(obj);
        }

        new public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType)base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class FileTypeDefinitionCollection : ArrayList
    {
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition obj)
        {
            base.Add(obj);
            return obj;
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition Add()
        {
            return Add(new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition());
        }

        public void Insert(int index, Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition obj)
        {
            base.Remove(obj);
        }

        new public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition)base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ReportTypeCollection : ArrayList
    {
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType obj)
        {
            base.Add(obj);
            return obj;
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType Add()
        {
            return Add(new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType());
        }

        public void Insert(int index, Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType obj)
        {
            base.Remove(obj);
        }

        new public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType)base[index]; }
            set { base[index] = value; }
        }
    }

    [Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ExtensionMappingTypeCollection : ArrayList
    {
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType obj)
        {
            base.Add(obj);
            return obj;
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType Add()
        {
            return Add(new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType());
        }

        public void Insert(int index, Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType obj)
        {
            base.Insert(index, obj);
        }

        public void Remove(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType obj)
        {
            base.Remove(obj);
        }

        new public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType)base[index]; }
            set { base[index] = value; }
        }
    }
    
    [XmlType(TypeName = "EffortAnalysisType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class EffortAnalysisType
    {

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType), ElementName = "CapersJones", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType __CapersJones;

        [XmlIgnore]
        [DisplayName("Capers Jones Effort Analysis")]
        [Description("Capers Jones effort analysis statistics")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType CapersJones
        {
            get
            {
                if (__CapersJones == null) __CapersJones = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType();
                return __CapersJones;
            }
            set { __CapersJones = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType), ElementName = "Custom", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType __Custom;

        [XmlIgnore]
        [DisplayName("Custom Effort Analysis")]
        [Description("Custom effort analysis statistics")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType Custom
        {
            get
            {
                if (__Custom == null) __Custom = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisMethodType();
                return __Custom;
            }
            set { __Custom = value; }
        }

        [XmlElement(ElementName = "EffortSavedUsingLIF", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __EffortSavedUsingLIF;

        [XmlIgnore]
        [DisplayName("Effort Saved Using LIF")]
        [Description("Effort saved using LIF in person hours")]
        public string EffortSavedUsingLIF
        {
            get { return __EffortSavedUsingLIF; }
            set { __EffortSavedUsingLIF = value; }
        }

        public EffortAnalysisType()
        {
        }
    }
    
    [XmlType(TypeName = "FunctionPointMappingType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class FunctionPointMappingType
    {
        [System.Runtime.InteropServices.DispIdAttribute(-4)]
        public IEnumerator GetEnumerator()
        {
            return LanguageCollection.GetEnumerator();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType obj)
        {
            return LanguageCollection.Add(obj);
        }

        [XmlIgnore]        
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType)LanguageCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return LanguageCollection.Count; }
        }

        public void Clear()
        {
            LanguageCollection.Clear();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType Remove(int index)
        {
            Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType obj = LanguageCollection[index];
            LanguageCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            LanguageCollection.Remove(obj);
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.LanguageType), ElementName = "Language", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public LanguageTypeCollection __LanguageCollection;

        [XmlIgnore]
        [DisplayName("Language Type")]
        [Description("The programming language used in the code")]
        public LanguageTypeCollection LanguageCollection
        {
            get
            {
                if (__LanguageCollection == null) __LanguageCollection = new LanguageTypeCollection();
                return __LanguageCollection;
            }
            set { __LanguageCollection = value; }
        }

        public FunctionPointMappingType()
        {
        }
    }


    [XmlType(TypeName = "FileTypeAssociationsType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class FileTypeAssociationsType
    {
        [System.Runtime.InteropServices.DispIdAttribute(-4)]
        public IEnumerator GetEnumerator()
        {
            return FileTypeCollection.GetEnumerator();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition obj)
        {
            return FileTypeCollection.Add(obj);
        }

        [XmlIgnore]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition)FileTypeCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return FileTypeCollection.Count; }
        }

        public void Clear()
        {
            FileTypeCollection.Clear();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition Remove(int index)
        {
            Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition obj = FileTypeCollection[index];
            FileTypeCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            FileTypeCollection.Remove(obj);
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeDefinition), ElementName = "FileType", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public FileTypeDefinitionCollection __FileTypeCollection;

        [XmlIgnore]
        [DisplayName("File Type")]
        [Description("The type of file generated using LIF")]
        public FileTypeDefinitionCollection FileTypeCollection
        {
            get
            {
                if (__FileTypeCollection == null) __FileTypeCollection = new FileTypeDefinitionCollection();
                return __FileTypeCollection;
            }
            set { __FileTypeCollection = value; }
        }

        public FileTypeAssociationsType()
        {
        }
    }


    [XmlType(TypeName = "ModelObjectNamespaceDefinition"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ModelObjectNamespaceDefinition
    {

        [XmlElement(ElementName = "DataEntityNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __DataEntityNamespace;

        [XmlIgnore]
        [DisplayName("Data Entity Namespace")]
        [Description("Data entity namespace for model object")]
        public string DataEntityNamespace
        {
            get { return __DataEntityNamespace; }
            set { __DataEntityNamespace = value; }
        }

        [XmlElement(ElementName = "DataEntityRootNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __DataEntityRootNamespace;

        [XmlIgnore]
        [DisplayName("Data Entity Assembly Namespace")]
        [Description("Data entity assembly namespace for model object")]
        public string DataEntityRootNamespace
        {
            get { return __DataEntityRootNamespace; }
            set { __DataEntityRootNamespace = value; }
        }

        [XmlElement(ElementName = "SerializerNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __SerializerNamespace;

        [XmlIgnore]
        [DisplayName("Serializer Namespace")]
        [Description("Serializer namespace for model object")]
        public string SerializerNamespace
        {
            get { return __SerializerNamespace; }
            set { __SerializerNamespace = value; }
        }

        [XmlElement(ElementName = "SerializerRootNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __SerializerRootNamespace;

        [XmlIgnore]
        [DisplayName("Serializer Assembly Namespace")]
        [Description("Serializer assembly namespace for model object")]
        public string SerializerRootNamespace
        {
            get { return __SerializerRootNamespace; }
            set { __SerializerRootNamespace = value; }
        }

        [XmlElement(ElementName = "XmlNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __XmlNamespace;

        [XmlIgnore]
        [DisplayName("XML Namespace")]
        [Description("XML namespace for model object")]
        public string XmlNamespace
        {
            get { return __XmlNamespace; }
            set { __XmlNamespace = value; }
        }

        public ModelObjectNamespaceDefinition()
        {
        }
    }


    [XmlType(TypeName = "ComponentDefinition"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ComponentDefinition
    {

        [XmlElement(ElementName = "assembly", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __assembly;

        [XmlIgnore]
        [DisplayName("Assembly Name")]
        [Description("The name of the component assembly")]
        public string assembly
        {
            get { return __assembly; }
            set { __assembly = value; }
        }

        [XmlElement(ElementName = "fullType", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __fullType;

        [XmlIgnore]
        [DisplayName("Full Type")]
        [Description("The fully qualified type of the component assembly")]
        public string fullType
        {
            get { return __fullType; }
            set { __fullType = value; }
        }

        public ComponentDefinition()
        {
        }
    }


    [XmlType(TypeName = "LegacyWorkbenchConfigurations"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class LegacyWorkbenchConfigurations
    {

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition), ElementName = "ContractsImporter", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition __ContractsImporter;

        [XmlIgnore]
        [Category("Importer")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Contract Importer")]
        [Description("The class which will be used to import the contracts")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition ContractsImporter
        {
            get
            {
                if (__ContractsImporter == null) __ContractsImporter = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition();
                return __ContractsImporter;
            }
            set { __ContractsImporter = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition), ElementName = "ModelObjectImporter", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition __ModelObjectImporter;

        [XmlIgnore]
        [Category("Importer")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Model Object Importer")]
        [Description("The class which will be used to import the model objects")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition ModelObjectImporter
        {
            get
            {
                if (__ModelObjectImporter == null) __ModelObjectImporter = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition();
                return __ModelObjectImporter;
            }
            set { __ModelObjectImporter = value; }
        }

        [XmlElement(ElementName = "XsdObjectGeneratorPath", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __XsdObjectGeneratorPath;

        [XmlIgnore]
        [Category("XSD Object Generator Path")]
        [DisplayName("XSD Object Generator Path")]
        [Description("XSD object generator path used for code generation")]
        public string XsdObjectGeneratorPath
        {
            get { return __XsdObjectGeneratorPath; }
            set { __XsdObjectGeneratorPath = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition), ElementName = "CodeGenerator", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition __CodeGenerator;

        [XmlIgnore]
        [Category("Code Generator")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Code Generator")]
        [Description("The class which will be used for code generation")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition CodeGenerator
        {
            get
            {
                if (__CodeGenerator == null) __CodeGenerator = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ComponentDefinition();
                return __CodeGenerator;
            }
            set { __CodeGenerator = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.CodeGeneratedNamespaceDefinition), ElementName = "CodeGeneratedNamespaces", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.CodeGeneratedNamespaceDefinition __CodeGeneratedNamespaces;

        [XmlIgnore]
        [Category("LegacyWorkBench Namespaces")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Legacy WorkBench Namespaces")]
        [Description("Namespaces to be used for generated solution")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.CodeGeneratedNamespaceDefinition CodeGeneratedNamespaces
        {
            get
            {
                if (__CodeGeneratedNamespaces == null) __CodeGeneratedNamespaces = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.CodeGeneratedNamespaceDefinition();
                return __CodeGeneratedNamespaces;
            }
            set { __CodeGeneratedNamespaces = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportingConfigurationsType), ElementName = "ReportingConfigurations", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportingConfigurationsType __ReportingConfigurations;

        [XmlIgnore]
        [Category("Reporting Configuration")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Reporting Configuration")]
        [Description("Reporting configuration contains all the config details used for generation and display of reports")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportingConfigurationsType ReportingConfigurations
        {
            get
            {
                if (__ReportingConfigurations == null) __ReportingConfigurations = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportingConfigurationsType();
                return __ReportingConfigurations;
            }
            set { __ReportingConfigurations = value; }
        }

        public LegacyWorkbenchConfigurations()
        {
        }
    }


    [XmlType(TypeName = "ReportType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ReportType
    {

        [XmlAttribute(AttributeName = "Name", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Name;

        [XmlIgnore]
        [DisplayName("Report Name")]
        [Description("The name of report to be generated")]
        public string Name
        {
            get { return __Name; }
            set { __Name = value; }
        }

        [XmlAttribute(AttributeName = "FileLocation", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __FileLocation;

        [XmlIgnore]
        [DisplayName("File Location")]
        [Description("The location of report designer file")]
        public string FileLocation
        {
            get { return __FileLocation; }
            set { __FileLocation = value; }
        }

        [XmlAttribute(AttributeName = "Alias", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Alias;

        [XmlIgnore]
        [DisplayName("Report Alias")]
        [Description("The alias name of report to be generated")]
        public string Alias
        {
            get { return __Alias; }
            set { __Alias = value; }
        }

        public ReportType()
        {
        }
    }

    [XmlType(TypeName = "ReportsType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ReportsType
    {
        [System.Runtime.InteropServices.DispIdAttribute(-4)]
        public IEnumerator GetEnumerator()
        {
            return ReportCollection.GetEnumerator();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType obj)
        {
            return ReportCollection.Add(obj);
        }

        [XmlIgnore]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType)ReportCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return ReportCollection.Count; }
        }

        public void Clear()
        {
            ReportCollection.Clear();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType Remove(int index)
        {
            Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType obj = ReportCollection[index];
            ReportCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            ReportCollection.Remove(obj);
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportType), ElementName = "Report", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ReportTypeCollection __ReportCollection;

        [XmlIgnore]
        [DisplayName("Report Collection")]
        [Description("The different types of report than can be generated and viewed")]
        public ReportTypeCollection ReportCollection
        {
            get
            {
                if (__ReportCollection == null) __ReportCollection = new ReportTypeCollection();
                return __ReportCollection;
            }
            set { __ReportCollection = value; }
        }

        public ReportsType()
        {
        }
    }


    [XmlType(TypeName = "ContractNamespaceDefinition"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ContractNamespaceDefinition
    {

        [XmlElement(ElementName = "DataEntityNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __DataEntityNamespace;

        [XmlIgnore]
        [DisplayName("Data Entity Namespace")]
        [Description("Data entity namespace of contract")]
        public string DataEntityNamespace
        {
            get { return __DataEntityNamespace; }
            set { __DataEntityNamespace = value; }
        }

        [XmlElement(ElementName = "DataEntityRootNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __DataEntityRootNamespace;

        [XmlIgnore]
        [DisplayName("Data Entity Assembly Namespace")]
        [Description("Data entity assembly namespace of contract")]
        public string DataEntityRootNamespace
        {
            get { return __DataEntityRootNamespace; }
            set { __DataEntityRootNamespace = value; }
        }

        [XmlElement(ElementName = "SerializerNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __SerializerNamespace;

        [XmlIgnore]
        [DisplayName("Serializer Namespace")]
        [Description("Serializer namespace of contract")]
        public string SerializerNamespace
        {
            get { return __SerializerNamespace; }
            set { __SerializerNamespace = value; }
        }

        [XmlElement(ElementName = "SerializerRootNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __SerializerRootNamespace;

        [XmlIgnore]
        [DisplayName("Serializer Assembly Namespace")]
        [Description("Serializer assembly namespace of contract")]
        public string SerializerRootNamespace
        {
            get { return __SerializerRootNamespace; }
            set { __SerializerRootNamespace = value; }
        }

        [XmlElement(ElementName = "HostAccessNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __HostAccessNamespace;

        [XmlIgnore]
        [DisplayName("Host Access Namespace")]
        [Description("Host access namespace of contract")]
        public string HostAccessNamespace
        {
            get { return __HostAccessNamespace; }
            set { __HostAccessNamespace = value; }
        }

        [XmlElement(ElementName = "HostAccessRootNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __HostAccessRootNamespace;

        [XmlIgnore]
        [DisplayName("Host Access Assembly Namespace")]
        [Description("Host access assembly namespace of contract")]
        public string HostAccessRootNamespace
        {
            get { return __HostAccessRootNamespace; }
            set { __HostAccessRootNamespace = value; }
        }

        [XmlElement(ElementName = "XmlNamespace", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __XmlNamespace;

        [XmlIgnore]
        [DisplayName("XML Namespace")]
        [Description("XML namespace of contract")]
        public string XmlNamespace
        {
            get { return __XmlNamespace; }
            set { __XmlNamespace = value; }
        }

        public ContractNamespaceDefinition()
        {
        }
    }


    [XmlType(TypeName = "ExtensionMappingType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ExtensionMappingType
    {

        [XmlAttribute(AttributeName = "GroupKey", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __GroupKey;

        [XmlIgnore]
        [DisplayName("Group Key")]
        [Description("group key for a group of file types")]
        public string GroupKey
        {
            get { return __GroupKey; }
            set { __GroupKey = value; }
        }

        [XmlAttribute(AttributeName = "ExcludeExtensions", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __ExcludeExtensions;

        [XmlIgnore]
        [DisplayName("Exclude Extensions")]
        [Description("Exclude these file extensions from the group of file types")]
        public string ExcludeExtensions
        {
            get { return __ExcludeExtensions; }
            set { __ExcludeExtensions = value; }
        }

        [XmlAttribute(AttributeName = "CodeLanguage", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __CodeLanguage;

        [XmlIgnore]
        [DisplayName("Code Language")]
        [Description("The programming language used for the code")]
        public string CodeLanguage
        {
            get { return __CodeLanguage; }
            set { __CodeLanguage = value; }
        }

        public ExtensionMappingType()
        {
        }
    }


    [XmlType(TypeName = "ExtensionsToAnalyzeType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ExtensionsToAnalyzeType
    {
        [System.Runtime.InteropServices.DispIdAttribute(-4)]
        public IEnumerator GetEnumerator()
        {
            return ExtensionMappingCollection.GetEnumerator();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType Add(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType obj)
        {
            return ExtensionMappingCollection.Add(obj);
        }

        [XmlIgnore]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType this[int index]
        {
            get { return (Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType)ExtensionMappingCollection[index]; }
        }

        [XmlIgnore]
        public int Count
        {
            get { return ExtensionMappingCollection.Count; }
        }

        public void Clear()
        {
            ExtensionMappingCollection.Clear();
        }

        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType Remove(int index)
        {
            Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType obj = ExtensionMappingCollection[index];
            ExtensionMappingCollection.Remove(obj);
            return obj;
        }

        public void Remove(object obj)
        {
            ExtensionMappingCollection.Remove(obj);
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionMappingType), ElementName = "ExtensionMapping", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public ExtensionMappingTypeCollection __ExtensionMappingCollection;

        [XmlIgnore]
        [DisplayName("Extension Mapping Type")]
        [Description("The mapping of extensions with a group of file types")]
        public ExtensionMappingTypeCollection ExtensionMappingCollection
        {
            get
            {
                if (__ExtensionMappingCollection == null) __ExtensionMappingCollection = new ExtensionMappingTypeCollection();
                return __ExtensionMappingCollection;
            }
            set { __ExtensionMappingCollection = value; }
        }

        public ExtensionsToAnalyzeType()
        {
        }
    }


    [XmlType(TypeName = "FileTypeDefinition"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class FileTypeDefinition
    {

        [XmlAttribute(AttributeName = "Key", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Key;

        [XmlIgnore]
        [DisplayName("File Key")]
        [Description("The key for a file type")]
        public string Key
        {
            get { return __Key; }
            set { __Key = value; }
        }

        [XmlAttribute(AttributeName = "Value", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Value;

        [XmlIgnore]
        [DisplayName("File Value")]
        [Description("The value of a file type")]
        public string @Value
        {
            get { return __Value; }
            set { __Value = value; }
        }

        public FileTypeDefinition()
        {
        }
    }


    [XmlType(TypeName = "EffortAnalysisMethodType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class EffortAnalysisMethodType
    {

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionsToAnalyzeType), ElementName = "ExtensionsToAnalyze", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionsToAnalyzeType __ExtensionsToAnalyze;

        [XmlIgnore]
        [DisplayName("Extensions To Analyze")]
        [Description("The file extensions to be analyzed for effort estimation")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionsToAnalyzeType ExtensionsToAnalyze
        {
            get
            {
                if (__ExtensionsToAnalyze == null) __ExtensionsToAnalyze = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ExtensionsToAnalyzeType();
                return __ExtensionsToAnalyze;
            }
            set { __ExtensionsToAnalyze = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FunctionPointMappingType), ElementName = "FunctionPointMapping", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FunctionPointMappingType __FunctionPointMapping;

        [XmlIgnore]
        [DisplayName("Function Point Mapping")]
        [Description("The function point to LOC mapping used for effort analysis")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FunctionPointMappingType FunctionPointMapping
        {
            get
            {
                if (__FunctionPointMapping == null) __FunctionPointMapping = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FunctionPointMappingType();
                return __FunctionPointMapping;
            }
            set { __FunctionPointMapping = value; }
        }

        public EffortAnalysisMethodType()
        {
        }
    }


    [XmlType(TypeName = "ReportingConfigurationsType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class ReportingConfigurationsType
    {

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportsType), ElementName = "Reports", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportsType __Reports;

        [XmlIgnore]
        [Category("Reporting Configuration")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Report Types")]
        [Description("The different types of reports that can be generated and viewed")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportsType Reports
        {
            get
            {
                if (__Reports == null) __Reports = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ReportsType();
                return __Reports;
            }
            set { __Reports = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeAssociationsType), ElementName = "FileTypeAssociations", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeAssociationsType __FileTypeAssociations;

        [XmlIgnore]
        [Category("Reporting Configuration")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("File Type Association")]
        [Description("The various file types used for effort analysis")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeAssociationsType FileTypeAssociations
        {
            get
            {
                if (__FileTypeAssociations == null) __FileTypeAssociations = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.FileTypeAssociationsType();
                return __FileTypeAssociations;
            }
            set { __FileTypeAssociations = value; }
        }

        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisType), ElementName = "EffortAnalysis", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisType __EffortAnalysis;

        [XmlIgnore]
        [Category("Reporting Configuration")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Effort Analysis Type")]
        [Description("The type of effort analysis to be used for report generation")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisType EffortAnalysis
        {
            get
            {
                if (__EffortAnalysis == null) __EffortAnalysis = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.EffortAnalysisType();
                return __EffortAnalysis;
            }
            set { __EffortAnalysis = value; }
        }

        public ReportingConfigurationsType()
        {
        }
    }


    [XmlType(TypeName = "CodeGeneratedNamespaceDefinition"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class CodeGeneratedNamespaceDefinition
    {        
        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ModelObjectNamespaceDefinition), ElementName = "ModelObjectNamespaces", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ModelObjectNamespaceDefinition __ModelObjectNamespaces;

        [XmlIgnore]
        [Category("LegacyWorkBench Namespaces")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Model Object Namespaces")]
        [Description("The namespaces to be used for files generated for model objects")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ModelObjectNamespaceDefinition ModelObjectNamespaces
        {
            get
            {
                if (__ModelObjectNamespaces == null) __ModelObjectNamespaces = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ModelObjectNamespaceDefinition();
                return __ModelObjectNamespaces;
            }
            set { __ModelObjectNamespaces = value; }
        }
                
        [XmlElement(Type = typeof(Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ContractNamespaceDefinition), ElementName = "ContractNamespaces", IsNullable = false, Form = XmlSchemaForm.Qualified)]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ContractNamespaceDefinition __ContractNamespaces;

        [XmlIgnore]
        [Category("LegacyWorkBench Namespaces")]
        [TypeConverter(typeof(ExpandableObjectConverter))]
        [DisplayName("Contract Namespaces")]
        [Description("The namespaces to be used for files generated for contracts")]
        public Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ContractNamespaceDefinition ContractNamespaces
        {
            get
            {
                if (__ContractNamespaces == null) __ContractNamespaces = new Infosys.Lif.LegacyWorkbench.LegacyWorkbenchConfigurations.ContractNamespaceDefinition();
                return __ContractNamespaces;
            }
            set { __ContractNamespaces = value; }
        }

        public CodeGeneratedNamespaceDefinition()
        {
        }
    }


    [XmlType(TypeName = "LanguageType"), Serializable]
    [EditorBrowsable(EditorBrowsableState.Advanced)]
    public class LanguageType
    {

        [XmlAttribute(AttributeName = "Name", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __Name;

        [XmlIgnore]
        [DisplayName("Language Name")]
        [Description("The programming language used for code")]
        public string Name
        {
            get { return __Name; }
            set { __Name = value; }
        }

        [XmlAttribute(AttributeName = "UnitLOCPerFunctionPoint", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __UnitLOCPerFunctionPoint;

        [XmlIgnore]
        [DisplayName("Unit LOC per Function Count")]
        [Description("Unit LOC per function count for a language")]
        public string UnitLOCPerFunctionPoint
        {
            get { return __UnitLOCPerFunctionPoint; }
            set { __UnitLOCPerFunctionPoint = value; }
        }

        [XmlAttribute(AttributeName = "PersonHrsPerFunctionPoint", DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __PersonHrsPerFunctionPoint;

        [XmlIgnore]
        [DisplayName("Person Hours per Function Point")]
        [Description("Person hours per function point for a language")]
        public string PersonHrsPerFunctionPoint
        {
            get { return __PersonHrsPerFunctionPoint; }
            set { __PersonHrsPerFunctionPoint = value; }
        }

        public LanguageType()
        {
        }
    }
}
