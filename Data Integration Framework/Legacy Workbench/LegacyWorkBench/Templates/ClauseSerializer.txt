$ItemsAppender
	// Fill up the ##DataItemName## field in the string.
	##FilledItems##
	sb.Append(commaChar);
$BooleanAppender
	// Fill up the ##DataItemName## field in the string.
	sb.Append( (dataEntity.__##DataItemName##)? "Y" : "N" );
$FloatAppender
	if(dataEntity.__##DataItemName##Specified)
	{
		// Fill up the ##DataItemName## field in the string.
		sb.Append( dataEntity.__##DataItemName##);
	}
$StringAppender
	if(dataEntity.##DataItemName## != null)
	{
		sb.Append(dataEntity.##DataItemName##);
	}
$DateAppender
	if(dataEntity.__##DataItemName##Specified)
	{
		sb.Append(dataEntity.##DataItemName##.ToString("mmddyyyy"));
	}
$IntegerAppender
	if(dataEntity.__##DataItemName##Specified)
	{
		if(dataEntity.##DataItemName## < 0)
		{
			sb.Append("-");
		}
		sb.Append(dataEntity.##DataItemName##);
	}
$DataItems
	// Retrieving the ##DataItemName##
	if(splitStrings[splitLooper].Length > 0)
	{
		dataEntityMainObject.##DataItemName## = Convert.To##DataType##(splitStrings[splitLooper]);
	}
	splitLooper++;
$DataItemsBoolean
	if(splitStrings[splitLooper].Length > 0)
	{
		dataEntityMainObject.##DataItemName## = (splitStrings[splitLooper] == "Y");
	}	
	splitLooper++;
$end
/**************************************************************************
This parser class was code generated by Legacy Parser customized for the Sse team.
##ClauseName## class generated for the ##ProgramId## host entity.
Copyright (c) 2003 - 2005 Infosys Technologies Ltd. All Rights Reserved.
**************************************************************************/

using System;
using System.Text;
//Include the DataEntity NameSpace
using DataEntity = ##DataEntityNameSpace##;
using Infosys.Lif.LegacyParser.Framework;

namespace ##Namespace##
{
    /// <summary>
    /// The parser class  for Object ##ClauseName##.
    /// This class will be used to serialize the Data Entity to ascii text
    /// or ascii text to Data Entity
    /// </summary>
    public partial class ##ClauseName##Serializer
    {		
        static char hashChar = Convert.ToChar(5);//#
        static char ampersandChar = Convert.ToChar(2);//&
        static char openBracketChar = Convert.ToChar(3);//{
        static char closeBracketChar = Convert.ToChar(4);//}
        static char commaChar = Convert.ToChar(6);//,

        /// <summary>
        /// The Serialize method is used to serialize a Data Entity
        /// The items in the Data Entity will be appended to form an ascii string.
        /// </summary>
        /// <param name="dataEntityObj">The Data Entity of type ##DataEntityClass## which has to be serialized.</param>
        /// <returns>The serialized ascii string.</returns>
        public string Serialize(object dataEntityObj)
        {
            // Checking that the data entity passed is not a null and is of the right type.
            // If not, throw an exception
            // || dataEntityObj.GetType() != typeof(DataEntity.##DataEntityClass##)
		    if(dataEntityObj == null )
            {
			    throw new Exception("Incorrect data entity passed");
            }
    		DataEntity.##DataEntityClass## dataEntity = 
                (DataEntity.##DataEntityClass##)dataEntityObj;
            //prepare a string builder
		    StringBuilder sb = new StringBuilder();
		    
			##AppendedItems##

			return sb.ToString();
		}
		
		/// <summary>
        /// The Deserialize method is used to de-serialize a string into a Data Entity
        /// The items in the ascii string will be appended to form the Data Entity.
        /// </summary>
        /// <param name="serializedString">The string to be deserialized.</param>
        /// <param name="dataEntityMainObject">Data entity to which the child entities will be appended</param>
        /// <returns>The data entity.</returns>
		public object Deserialize(string serializedString, DataEntity.##DataEntityClass## dataEntityMainObject)
		{
			int splitLooper = 5;
			char[] entitySplitters = new char[1];
			//DataEntity.##DataEntityClass## dataEntityMainObject = new DataEntity.##DataEntityClass##();
			entitySplitters[0] = commaChar;
			
			string[] splitStrings = serializedString.Split(entitySplitters, StringSplitOptions.None);
			
			##DataItemsFilled##
			
			return dataEntityMainObject;
		}
	}
}
