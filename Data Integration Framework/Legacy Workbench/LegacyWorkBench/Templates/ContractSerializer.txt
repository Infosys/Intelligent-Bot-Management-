$TemplateForTopLevel
	##CountersForChildElements##
	while (serializerString.Length > 8 && serializerString != Environment.NewLine)
	{
		switch(serializerString.Substring(0, 8).ToUpperInvariant())
		{
			##CaseStatementsFilledForContract##
			default:
                serializerString = RemoveUnknownModelObject(serializerString);
                break;
		}
	}
	
$TemplateForChildModelObjects

	##CountersForChildElements##	
	while(!serializerString.StartsWith(ModelObjectSuffix))
	{
		switch(serializerString.Substring(0, 8).ToUpperInvariant())
		{
			##CaseStatementsFilledForModelObject##
			default:
                    serializerString = RemoveUnknownModelObject(serializerString);
                    break;
		}
	}
$TemplateForLoopRepeater
	#region Serialization of ##ModelObjectName##Collection

	if(##HasMaxLimit## && ##ParentModelObjectName##.##ModelObjectName##Collection.Count > ##MaxCount##)
	{
		throw new Exception(@"##ParentModelObjectName##.##ModelObjectName##Collection has too many records");
	}
	{
		for(int counter##ModelObjectName##_##LevelNumber## = 0; counter##ModelObjectName##_##LevelNumber## < ##ParentModelObjectName##.##ModelObjectName##Collection.Count; counter##ModelObjectName##_##LevelNumber##++)
		{
			##ModelObjectSerializerNameSpace##.##ModelObjectEntityName##Serializer ModelObjectSerializerFor##ModelObjectName##_##LevelNumber## = new ##ModelObjectSerializerNameSpace##.##ModelObjectEntityName##Serializer();
			if(!##IsADDRL7xxModelObject##)
			{
				// ModelObject headers to be appended
				sb.Append("##HostName##" + commaChar);
				
				
			}
			sb.Append(ModelObjectSerializerFor##ModelObjectName##_##LevelNumber##.Serialize(##ParentModelObjectName##.##ModelObjectName##Collection[counter##ModelObjectName##_##LevelNumber##]));
			sb.Append(ampersandChar);
			
			if(##HasChildModelObjects##)
			{
				sb.Append(ModelObjectPrefix);
				##ForLoop##
				sb.Append(ModelObjectSuffix);
			}
		}
		if(##CheckCardinality## && ##ParentModelObjectName##.##ModelObjectName##Collection.Count == 0)
		{
			##ChildModelObjectFilled##
		}
	}
	#endregion Serialization of ##ModelObjectName##
$ChildModelObjectFiller
	sb.Append("##ModelObjectName##" + ampersandChar);
	##ChildModelObjectsFilled##
$CaseStatement
		case "##HostName##":
			serializerString = serializerString.Substring(9);
            
            indexOfModelObjectPrefix = serializerString.IndexOf(ModelObjectPrefix);
            
            indexOfModelObjectSuffix = serializerString.IndexOf(ModelObjectSuffix);
            
            indexOfModelObjectEnd = serializerString.IndexOf(endOfModelObjectIndicator);

            toBeDeserializedString = serializerString.Substring(0, indexOfModelObjectEnd);
            
            serializerString = serializerString.Substring(indexOfModelObjectEnd);
			
			// Call to the ModelObject Serializer, deserialize method
			##ModelObjectSerializerNS##.##ModelObjectName##Serializer ##ProgramId##ModelObjectSerializer##LevelNumber## = new ##ModelObjectSerializerNS##.##ModelObjectName##Serializer();
			ContractEntities.##ModelObjectEntityId## ##ProgramId##Entity##LevelNumber## = new ContractEntities.##ModelObjectEntityId##();
			##ParentModelObjectNameWithoutZero##.Add(##ProgramId##Entity##LevelNumber##);
			##ParentIdentifier##Counter = ##ParentModelObjectNameWithoutZero##.Count - 1;

			##ProgramId##ModelObjectSerializer##LevelNumber##.Deserialize(toBeDeserializedString, ##ProgramId##Entity##LevelNumber##);
			serializerString = serializerString.Substring(1);
			if(serializerString.StartsWith(ModelObjectPrefix))
			{
				serializerString = serializerString.Substring(ModelObjectPrefix.Length);
				// Now loop thru children ModelObjects
				##ChildModelObjectsFilled##		
				serializerString = serializerString.Substring(ModelObjectSuffix.Length);
			}
			break;
$end

/******************************************************************************
This class was code generated by Legacy Workbench.

This is the serializer class for the ##ContractName## Contract. 
##ContractDescription##

Copyright (c) 2003 - 2008 Infosys Technologies Ltd. All Rights Reserved.
******************************************************************************/
using System;
using System.Text;

//Import LIF framework namespaces
using Infosys.Lif.LegacyParser.Framework;

//Import contract data entity namespace
using ContractEntities = ##DataEntityNameSpace##;

namespace ##ContractNameSpace##
{
	/// <summary>
    /// This is a serializer class for contract "##ContractName##"
    /// This class is used to serialize the data entity to ASCII string and vice versa
    /// </summary>
	public partial class ##ContractName##Serializer : SerializerBase
	{
		//Declare various indicators to be used for serialization and deserialization
		static string ModelObjectSuffix;
        static string ModelObjectPrefix;
        static string endOfModelObjectIndicator;

        static char hashChar = Convert.ToChar(5);//#
        static char ampersandChar = Convert.ToChar(2);//&
        static char openBracketChar = Convert.ToChar(3);//{
        static char closeBracketChar = Convert.ToChar(4);//}
        static char commaChar = Convert.ToChar(6);//,

		/// <summary>
        /// This method is used to initialize various indicators
        /// </summary>        
        static ##ContractName##Serializer()
        {
			endOfModelObjectIndicator = Convert.ToString(ampersandChar);
			
            ModelObjectSuffix = Convert.ToString(closeBracketChar) + Convert.ToString(ampersandChar);

            ModelObjectPrefix = Convert.ToString(openBracketChar) + Convert.ToString(ampersandChar);
        }

		/// <summary>
        /// This method retrieves the header from the response data.        
        /// </summary>
        /// <param name="serializerString">response string</param>
        /// <param name="contractObject">contract data entity</param>        
		private void RetrieveHeader(string serializerString, ContractEntities.##ContractName## contractObject)
        {
			//first 55 characters make header
            string header = serializerString.Substring(0, 55);
            char[] headerSplitChars = new char[2];
            headerSplitChars[0] = hashChar;
            headerSplitChars[1] = ampersandChar;

            string[] splitHeader = header.Split(headerSplitChars, StringSplitOptions.None);
            switch (splitHeader[1][0])
            {
                case 'Y':
                    // Error has occured
                    break;
                case 'N':
                    break;
            }
        } 

		#region Serialization
		/// <summary>
        /// The Serialize method is used to serialize a Data Entity
        /// The items in the Data Entity will be appended to form an ascii string.
        /// </summary>
        /// <param name="dataEntity">The Data Entity of type ##ContractName## which has to be serialized</param>
        /// <returns>The serialized ASCII string</returns>
		public override string Serialize(object dataEntity)
		{
			ContractEntities.##ContractName## contractObject 
				= (ContractEntities.##ContractName##)dataEntity;
			StringBuilder sb = new StringBuilder();
			            sb.Append("##ContractName##" + hashChar);
            
            sb.Append("YYYYYYYY" + ampersandChar);

			##ForLoop##
			sb.Append(ampersandChar);
			return sb.ToString();
		}
		#endregion Serialization
		
		
		#region Deserialization
		/// <summary>
        /// The Deserialize method is used to deserialize an ascii string to its Data Entity
        /// </summary>
        /// <param name="serializerString">The string which has to be deserialized</param>
        /// <returns>Deserialized DataEntity i.e. ##ContractName## object containing the values 
        /// as returned by the host through the input ascii string</returns>
		public override object Deserialize(string serializerString)
		{
			ContractEntities.##ContractName## contractObject
				= new ContractEntities.##ContractName##();
			
			//clip off the header
            RetrieveHeader(serializerString, contractObject);
            serializerString = serializerString.Substring(55);
            
            int indexOfModelObjectPrefix, indexOfModelObjectSuffix, lengthOfDeserializeString, indexOfModelObjectEnd;
            string toBeDeserializedString;
            bool shouldExecute  = true;

			##TopLevelFilled##
			
			return contractObject;
		}
		#endregion Deserialization
		
		/// <summary>
        /// remove the data of those model object from the to be deserialized string which are
        /// not defined as part of the contract
        /// </summary>
        /// <param name="serializerString">to be deserialized string</param>
        /// <returns>string after removing data of unknown model objects</returns>
		private static string RemoveUnknownModelObject(string serializerString)
        {
            bool shouldNotRemoveEndChar = true;
            serializerString = serializerString.Substring(9);

            int indexOfModelObjectEnd = serializerString.IndexOf(endOfModelObjectIndicator);

            serializerString = serializerString.Substring(indexOfModelObjectEnd);
            serializerString = serializerString.Substring(endOfModelObjectIndicator.Length);
            
            //if the string contains unknown model object data, remove that
            if (serializerString.StartsWith(ModelObjectPrefix))
            {
                serializerString = serializerString.Substring(ModelObjectPrefix.Length);
                serializerString = RemoveUnknownModelObject(serializerString);
                serializerString = serializerString.Substring(ModelObjectSuffix.Length);
                shouldNotRemoveEndChar = false;
            }
			//return string after removing data of unknown model objects
            return serializerString;
        }
	}
}