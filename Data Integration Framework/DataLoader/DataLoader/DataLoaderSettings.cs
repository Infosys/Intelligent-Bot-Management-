// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.4.1.0
// Schema file: DataLoaderSettings.xsd
// Creation Date: 1/30/2007 1:17:04 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace Infosys.Lif.DataLoader
{

	public struct Declarations
	{
		public const string SchemaVersion = "";
	}


	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class EntityCollection : ArrayList
	{
		public Entity Add(Entity obj)
		{
			base.Add(obj);
			return obj;
		}

		public Entity Add()
		{
			return Add(new Entity());
		}

		public void Insert(int index, Entity obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Entity obj)
		{
			base.Remove(obj);
		}

		new public Entity this[int index]
		{
			get { return (Entity) base[index]; }
			set { base[index] = value; }
		}
	}

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class TestDataCollection : ArrayList
	{
		public TestData Add(TestData obj)
		{
			base.Add(obj);
			return obj;
		}

		public TestData Add()
		{
			return Add(new TestData());
		}

		public void Insert(int index, TestData obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(TestData obj)
		{
			base.Remove(obj);
		}

		new public TestData this[int index]
		{
			get { return (TestData) base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlRoot(ElementName="DataLoaderSettings",IsNullable=false),Serializable]
	public class DataLoaderSettings
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator() 
		{
			return EntityCollection.GetEnumerator();
		}

		public Entity Add(Entity obj)
		{
			return EntityCollection.Add(obj);
		}

		[XmlIgnore]
		public Entity this[int index]
		{
			get { return (Entity) EntityCollection[index]; }
		}

		[XmlIgnore]
        public int Count 
		{
            get { return EntityCollection.Count; }
        }

        public void Clear()
		{
            EntityCollection.Clear();
        }

		public Entity Remove(int index) 
		{ 
            Entity obj = EntityCollection[index];
            EntityCollection.Remove(obj);
			return obj;
        }

        public void Remove(object obj)
		{
            EntityCollection.Remove(obj);
        }

		[XmlAttribute(AttributeName="LoaderClass",DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __LoaderClass;
		
		[XmlIgnore]
		public string LoaderClass
		{ 
			get { return __LoaderClass; }
			set { __LoaderClass = value; }
		}

		[XmlAttribute(AttributeName="LoaderType",DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __LoaderType;
		
		[XmlIgnore]
		public string LoaderType
		{ 
			get { return __LoaderType; }
			set { __LoaderType = value; }
		}

		[XmlElement(Type=typeof(Entity),ElementName="Entity",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public EntityCollection __EntityCollection;
		
		[XmlIgnore]
		public EntityCollection EntityCollection
		{
			get
			{
				if (__EntityCollection == null) __EntityCollection = new EntityCollection();
				return __EntityCollection;
			}
			set {__EntityCollection = value;}
		}

		public DataLoaderSettings()
		{
		}
	}


	[XmlType(TypeName="Entity"),Serializable]
	public class Entity
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator() 
		{
			return TestDataCollection.GetEnumerator();
		}

		public TestData Add(TestData obj)
		{
			return TestDataCollection.Add(obj);
		}

		[XmlIgnore]
		public TestData this[int index]
		{
			get { return (TestData) TestDataCollection[index]; }
		}

		[XmlIgnore]
        public int Count 
		{
            get { return TestDataCollection.Count; }
        }

        public void Clear()
		{
            TestDataCollection.Clear();
        }

		public TestData Remove(int index) 
		{ 
            TestData obj = TestDataCollection[index];
            TestDataCollection.Remove(obj);
			return obj;
        }

        public void Remove(object obj)
		{
            TestDataCollection.Remove(obj);
        }

		[XmlAttribute(AttributeName="Name",DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __Name;
		
		[XmlIgnore]
		public string Name
		{ 
			get { return __Name; }
			set { __Name = value; }
		}

		[XmlAttribute(AttributeName="ClassName",DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __ClassName;
		
		[XmlIgnore]
		public string ClassName
		{ 
			get { return __ClassName; }
			set { __ClassName = value; }
		}

		[XmlAttribute(AttributeName="DefaultSource",DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __DefaultSource;
		
		[XmlIgnore]
		public string DefaultSource
		{ 
			get { return __DefaultSource; }
			set { __DefaultSource = value; }
		}

		[XmlElement(Type=typeof(TestData),ElementName="TestData",IsNullable=false,Form=XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public TestDataCollection __TestDataCollection;
		
		[XmlIgnore]
		public TestDataCollection TestDataCollection
		{
			get
			{
				if (__TestDataCollection == null) __TestDataCollection = new TestDataCollection();
				return __TestDataCollection;
			}
			set {__TestDataCollection = value;}
		}

		public Entity()
		{
		}
	}


	[XmlType(TypeName="TestData"),Serializable]
	public class TestData
	{

		[XmlAttribute(AttributeName="Filter",DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __Filter;
		
		[XmlIgnore]
		public string Filter
		{ 
			get { return __Filter; }
			set { __Filter = value; }
		}

		[XmlAttribute(AttributeName="FileName",DataType="string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __FileName;
		
		[XmlIgnore]
		public string FileName
		{ 
			get { return __FileName; }
			set { __FileName = value; }
		}

		public TestData()
		{
		}
	}
}
