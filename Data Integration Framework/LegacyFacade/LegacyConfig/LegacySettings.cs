// Copyright 2004, Microsoft Corporation
// Sample Code - Use restricted to terms of use defined in the accompanying license agreement (EULA.doc)

//--------------------------------------------------------------
// Autogenerated by XSDObjectGen version 1.3.6.0
// Schema file: Legacy.xsd
// Creation Date: 8/24/2005 3:18:35 PM
//--------------------------------------------------------------

using System;
using System.Xml.Serialization;
using System.Collections;
using System.Xml.Schema;
using System.ComponentModel;

namespace Infosys.Lif.LegacyConfig
{

	[Serializable]
	[EditorBrowsable(EditorBrowsableState.Advanced)]
	public class ServiceCollection : ArrayList
	{
		public Service Add(Service obj)
		{
			base.Add(obj);
			return obj;
		}

		public Service Add()
		{
			return Add(new Service());
		}

		public void Insert(int index, Service obj)
		{
			base.Insert(index, obj);
		}

		public void Remove(Service obj)
		{
			base.Remove(obj);
		}

		new public Service this[int index]
		{
			get { return (Service)base[index]; }
			set { base[index] = value; }
		}
	}



	[XmlRoot(ElementName = "LegacySettings", IsNullable = false), Serializable]
	public class LegacySettings
	{

		[XmlElement(Type = typeof(Services), ElementName = "Services", IsNullable = false, Form = XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Services __Services;

		[XmlIgnore]
		public Services Services
		{
			get
			{
				if (__Services == null) __Services = new Services();
				return __Services;
			}
			set { __Services = value; }
		}

		[XmlElement(Type = typeof(Wrapper), ElementName = "Wrapper", IsNullable = false, Form = XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public Wrapper __Wrapper;

		[XmlIgnore]
		public Wrapper Wrapper
		{
			get
			{
				if (__Wrapper == null) __Wrapper = new Wrapper();
				return __Wrapper;
			}
			set { __Wrapper = value; }
		}

		public LegacySettings()
		{
		}

        [XmlElement(ElementName = "EnablePerformanceCounters", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __EnablePerformanceCounters;

        [XmlIgnore]
        public string EnablePerformanceCounters
        {
            get { return __EnablePerformanceCounters; }
            set { __EnablePerformanceCounters = value; }
        }
	}


	[XmlType(TypeName = "Services"), XmlRoot, Serializable]
	public class Services
	{
		[System.Runtime.InteropServices.DispIdAttribute(-4)]
		public IEnumerator GetEnumerator()
		{
			return ServiceCollection.GetEnumerator();
		}

		public Service Add(Service obj)
		{
			return ServiceCollection.Add(obj);
		}

		[XmlIgnore]
		public Service this[int index]
		{
			get { return (Service)ServiceCollection[index]; }
		}

		[XmlIgnore]
		public int Count
		{
			get { return ServiceCollection.Count; }
		}

		public void Clear()
		{
			ServiceCollection.Clear();
		}

		public Service Remove(int index)
		{
			Service obj = ServiceCollection[index];
			ServiceCollection.Remove(obj);
			return obj;
		}

		public void Remove(object obj)
		{
			ServiceCollection.Remove(obj);
		}

		[XmlElement(Type = typeof(Service), ElementName = "Service", IsNullable = false, Form = XmlSchemaForm.Qualified)]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public ServiceCollection __ServiceCollection;

		[XmlIgnore]
		public ServiceCollection ServiceCollection
		{
			get
			{
				if (__ServiceCollection == null) __ServiceCollection = new ServiceCollection();
				return __ServiceCollection;
			}
			set { __ServiceCollection = value; }
		}

		public Services()
		{
		}
	}


	[XmlType(TypeName = "Service"), XmlRoot, Serializable]
	public class Service
	{

		[XmlElement(ElementName = "ServiceName", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __ServiceName;

		[XmlIgnore]
		public string ServiceName
		{
			get { return __ServiceName; }
			set { __ServiceName = value; }
		}

        [XmlElement(ElementName = "CacheEnabled", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __CacheEnabled;

        [XmlIgnore]
        public string CacheEnabled
        {
            get { return __CacheEnabled; }
            set { __CacheEnabled = value; }
        }

        [XmlElement(ElementName = "CacheIdentifier", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
        [EditorBrowsable(EditorBrowsableState.Advanced)]
        public string __CacheIdentifier;

        [XmlIgnore]
        public string CacheIdentifier
        {
            get { return __CacheIdentifier; }
            set { __CacheIdentifier = value; }
        }

		[XmlElement(ElementName = "SerializerClass", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __SerializerClass;

		[XmlIgnore]
		public string SerializerClass
		{
			get { return __SerializerClass; }
			set { __SerializerClass = value; }
		}

		[XmlElement(ElementName = "SerializerType", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __SerializerType;

		[XmlIgnore]
		public string SerializerType
		{
			get { return __SerializerType; }
			set { __SerializerType = value; }
		}

		[XmlElement(ElementName = "RegionName", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __RegionName;

		[XmlIgnore]
		public string RegionName
		{
			get { return __RegionName; }
			set { __RegionName = value; }
		}

		public Service()
		{
		}
	}


	[XmlType(TypeName = "Wrapper"), XmlRoot, Serializable]
	public class Wrapper
	{

		[XmlElement(ElementName = "WrapperType", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __WrapperType;

		[XmlIgnore]
		public string WrapperType
		{
			get { return __WrapperType; }
			set { __WrapperType = value; }
		}

		[XmlElement(ElementName = "WrapperClass", IsNullable = false, Form = XmlSchemaForm.Qualified, DataType = "string")]
		[EditorBrowsable(EditorBrowsableState.Advanced)]
		public string __WrapperClass;

		[XmlIgnore]
		public string WrapperClass
		{
			get { return __WrapperClass; }
			set { __WrapperClass = value; }
		}

		public Wrapper()
		{
		}
	}
}
